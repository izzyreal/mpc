#pragma once

#if __linux__
#include <cstdint>
#endif

#include <vector>
#include "Sequencer.hpp"

namespace mpc::sequencer {
    class Clock {
    public:
        Clock();

        /**
         * Processes musical position information that is not generated by VMPC2000XL,
         * typically a plugin host.
         */
        void processBufferExternal(const double hostPositionAtStartOfBufferQuarterNotes,
                                          const int nFrames,
                                          const int sampleRate,
                                          const double bpm,
                                          const int64_t timeInSamples);

        /**
         * Generates musical position information in the absence of a host or another
         * clock source.
         * This is typically used by VMPC2000XL in its standalone for.
         */
        void processBufferInternal(const float tempo,
                      const uint32_t sampleRate,
                      const uint16_t numSamples,
                      const double playStartPositionQuarterNotes);

        const std::vector<uint16_t>& getTicksForCurrentBuffer();
        void reset();
        bool areTicksBeingProduced();
        
        const double getLastProcessedHostPositionQuarterNotes();

        bool didJumpOccurInLastBuffer();
        
        void generateTransportInfo(const float tempo,
                                          const uint32_t sampleRate,
                                          const uint16_t numSamples,
                                          const double playStartPositionQuarterNotes);

    private:
        const double subDiv = 1.0 / Sequencer::TICKS_PER_QUARTER_NOTE;

        std::vector<double> positionsInQuarterNotes;
        std::vector<uint16_t> ticks;

        bool ticksAreBeingProduced;
        double previousHostPositionAtStartOfBufferQuarterNotes;
        double previousAbsolutePositionQuarterNotes;
        double previousRelativePositionQuarterNotes;
        double previousBpm;
        uint32_t previousSampleRate;
        int64_t previousTimeInSamples;
        uint16_t previousBufferSize;
        bool jumpOccurredInLastBuffer;

        void clearTicks();
        void resetJumpOccurredInLastBuffer();
        void computeTicksForCurrentBuffer(const double hostPositionAtStartOfBufferQuarterNotes,
                                          const int nFrames,
                                          const int sampleRate,
                                          const double bpm,
                                          const int64_t timeInSamples);

    };
}
