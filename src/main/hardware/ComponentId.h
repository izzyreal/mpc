#pragma once

#include <unordered_map>
#include <string>

namespace mpc::hardware {

    enum ComponentId {
        NONE,
        PAD_1_OR_AB, PAD_2_OR_CD, PAD_3_OR_EF, PAD_4_OR_GH,
        PAD_5_OR_IJ, PAD_6_OR_KL, PAD_7_OR_MN, PAD_8_OR_OP,
        PAD_9_OR_QR, PAD_10_OR_ST, PAD_11_OR_UV, PAD_12_OR_WX,
        PAD_13_OR_YZ, PAD_14_OR_AMPERSAND_OCTOTHORPE, PAD_15_OR_HYPHEN_EXCLAMATION_MARK, PAD_16_OR_PARENTHESES,

        CURSOR_LEFT_OR_DIGIT,
        CURSOR_RIGHT_OR_DIGIT,
        CURSOR_UP,
        CURSOR_DOWN,
        REC,
        OVERDUB,
        STOP,
        PLAY,
        PLAY_START,
        MAIN_SCREEN,
        PREV_STEP_OR_EVENT,
        NEXT_STEP_OR_EVENT,
        GO_TO,
        PREV_BAR_START,
        NEXT_BAR_END,
        TAP_TEMPO_OR_NOTE_REPEAT,
        NEXT_SEQ,
        TRACK_MUTE,
        OPEN_WINDOW,
        FULL_LEVEL_OR_CASE_SWITCH,
        SIXTEEN_LEVELS_OR_SPACE,
        F1,
        F2,
        F3,
        F4,
        F5,
        F6,
        SHIFT,
        ENTER_OR_SAVE,
        UNDO_SEQ,
        ERASE,
        AFTER_OR_ASSIGN,
        BANK_A,
        BANK_B,
        BANK_C,
        BANK_D,
        NUM_0_OR_VMPC,
        NUM_1_OR_SONG,
        NUM_2_OR_MISC,
        NUM_3_OR_LOAD,
        NUM_4_OR_SAMPLE,
        NUM_5_OR_TRIM,
        NUM_6_OR_PROGRAM,
        NUM_7_OR_MIXER,
        NUM_8_OR_OTHER,
        NUM_9_OR_MIDI_SYNC,

        DATA_WHEEL,
        SLIDER,
        REC_GAIN_POT,
        MAIN_VOLUME_POT,

        FULL_LEVEL_OR_CASE_SWITCH_LED,
        SIXTEEN_LEVELS_OR_SPACE_LED,
        NEXT_SEQ_LED,
        TRACK_MUTE_LED,
        BANK_A_LED,
        BANK_B_LED,
        BANK_C_LED,
        BANK_D_LED,
        AFTER_OR_ASSIGN_LED,
        UNDO_SEQ_LED,
        REC_LED,
        OVERDUB_LED,
        PLAY_LED
    };

    static const std::unordered_map<ComponentId, std::string> componentIdToLabel {
        { ComponentId::PAD_1_OR_AB, "pad-1-or-ab" },   { ComponentId::PAD_2_OR_CD, "pad-2-or-cd" },
        { ComponentId::PAD_3_OR_EF, "pad-3-or-ef" },   { ComponentId::PAD_4_OR_GH, "pad-4-or-gh" },
        { ComponentId::PAD_5_OR_IJ, "pad-5-or-ij" },   { ComponentId::PAD_6_OR_KL, "pad-6-or-kl" },
        { ComponentId::PAD_7_OR_MN, "pad-7-or-mn" },   { ComponentId::PAD_8_OR_OP, "pad-8-or-op" },
        { ComponentId::PAD_9_OR_QR, "pad-9-or-qr" },   { ComponentId::PAD_10_OR_ST, "pad-10-or-st" },
        { ComponentId::PAD_11_OR_UV, "pad-11-or-uv" }, { ComponentId::PAD_12_OR_WX, "pad-12-or-wx" },
        { ComponentId::PAD_13_OR_YZ, "pad-13-or-yz" }, { ComponentId::PAD_14_OR_AMPERSAND_OCTOTHORPE, "pad-14-or-ampersand-octothorpe" },
        { ComponentId::PAD_15_OR_HYPHEN_EXCLAMATION_MARK, "pad-15-or-hyphen-eclamation-mark" }, { ComponentId::PAD_16_OR_PARENTHESES, "pad-16-or-parentheses" },

        { ComponentId::CURSOR_LEFT_OR_DIGIT,     "cursor-left-or-digit" },
        { ComponentId::CURSOR_RIGHT_OR_DIGIT,    "cursor-right-or-digit" },
        { ComponentId::CURSOR_UP,       "cursor-up" },
        { ComponentId::CURSOR_DOWN,     "cursor-down" },
        { ComponentId::REC,             "rec" },
        { ComponentId::OVERDUB,         "overdub" },
        { ComponentId::STOP,            "stop" },
        { ComponentId::PLAY,            "play" },
        { ComponentId::PLAY_START,      "play-start" },
        { ComponentId::MAIN_SCREEN,     "main-screen" },
        { ComponentId::PREV_STEP_OR_EVENT, "prev-step-or-event" },
        { ComponentId::NEXT_STEP_OR_EVENT, "next-step-or-event" },
        { ComponentId::GO_TO,           "go-to" },
        { ComponentId::PREV_BAR_START,  "prev-bar-or-start" },
        { ComponentId::NEXT_BAR_END,    "next-bar-or-end" },
        { ComponentId::TAP_TEMPO_OR_NOTE_REPEAT,             "tap-or-note-repeat" },
        { ComponentId::NEXT_SEQ,        "next-seq" },
        { ComponentId::TRACK_MUTE,      "track-mute" },
        { ComponentId::OPEN_WINDOW,     "open-window" },
        { ComponentId::FULL_LEVEL_OR_CASE_SWITCH,      "full-level-or-case-switch" },
        { ComponentId::SIXTEEN_LEVELS_OR_SPACE,  "sixteen-levels-or-space" },
        { ComponentId::F1,              "f1" },
        { ComponentId::F2,              "f2" },
        { ComponentId::F3,              "f3" },
        { ComponentId::F4,              "f4" },
        { ComponentId::F5,              "f5" },
        { ComponentId::F6,              "f6" },
        { ComponentId::SHIFT,           "shift" },
        { ComponentId::ENTER_OR_SAVE,           "enter-or-save" },
        { ComponentId::UNDO_SEQ,        "undo-seq" },
        { ComponentId::ERASE,           "erase" },
        { ComponentId::AFTER_OR_ASSIGN,           "after-or-assign" },
        { ComponentId::BANK_A,          "bank-a" },
        { ComponentId::BANK_B,          "bank-b" },
        { ComponentId::BANK_C,          "bank-c" },
        { ComponentId::BANK_D,          "bank-d" },
        { ComponentId::NUM_0_OR_VMPC,           "0-or-vmpc" },
        { ComponentId::NUM_1_OR_SONG,           "1-or-song" },
        { ComponentId::NUM_2_OR_MISC,           "2-or-misc" },
        { ComponentId::NUM_3_OR_LOAD,           "3-or-load" },
        { ComponentId::NUM_4_OR_SAMPLE,           "4-or-sample" },
        { ComponentId::NUM_5_OR_TRIM,           "5-or-trim" },
        { ComponentId::NUM_6_OR_PROGRAM,           "6-or-program" },
        { ComponentId::NUM_7_OR_MIXER,           "7-or-mixer" },
        { ComponentId::NUM_8_OR_OTHER,           "8-or-other" },
        { ComponentId::NUM_9_OR_MIDI_SYNC,           "9-or-midi-sync" },
        { ComponentId::DATA_WHEEL, "data-wheel" },
        { ComponentId::SLIDER, "slider" },
        { ComponentId::REC_GAIN_POT, "rec-gain-pot" },
        { ComponentId::MAIN_VOLUME_POT, "main-volume-pot" },

        { ComponentId::FULL_LEVEL_OR_CASE_SWITCH_LED,      "full-level-or-case-switch-led" },
        { ComponentId::SIXTEEN_LEVELS_OR_SPACE_LED,  "sixteen-levels-or-space-led" },
        { ComponentId::NEXT_SEQ_LED,        "next-seq-led" },
        { ComponentId::TRACK_MUTE_LED,      "track-mute-led" },
        { ComponentId::BANK_A_LED,          "bank-a-led" },
        { ComponentId::BANK_B_LED,          "bank-b-led" },
        { ComponentId::BANK_C_LED,          "bank-c-led" },
        { ComponentId::BANK_D_LED,          "bank-d-led" },
        { ComponentId::AFTER_OR_ASSIGN_LED,           "after-or-assign-led" },
        { ComponentId::UNDO_SEQ_LED,        "undo-seq-led" },
        { ComponentId::REC_LED,             "rec-led" },
        { ComponentId::OVERDUB_LED,         "overdub-led" },
        { ComponentId::PLAY_LED,            "play-led" }
    };

    static const std::unordered_map<std::string, ComponentId> componentLabelToId = [] {
        std::unordered_map<std::string, ComponentId> map;
        for (const auto& [key, value] : componentIdToLabel)
            map[value] = key;
        return map;
    }();
}

