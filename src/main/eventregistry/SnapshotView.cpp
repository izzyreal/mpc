#include "SnapshotView.hpp"

using namespace mpc;
using namespace mpc::eventregistry;

bool SnapshotView::isProgramPadPressedBySource(
    ProgramPadIndex idx, Source src) const
{
    for (auto &e : snap->programPadEvents)
    {
        if (e->padIndex == idx && e->source == src)
        {
            return true;
        }
    }
    return false;
}

VelocityOrPressure
SnapshotView::getPressedProgramPadAfterTouchOrVelocity(
    ProgramPadIndex idx) const
{
    std::optional<VelocityOrPressure> result;

    for (const auto &e : snap->programPadEvents)
    {
        if (e->source == Source::NoteRepeat)
        {
            continue;
        }

        if (e->padIndex == idx)
        {
            if (e->pressure)
            {
                result = *e->pressure;
            }
            else if (!result)
            {
                result = e->velocity;
            }
        }
    }

    if (result)
    {
        return *result;
    }

    throw std::invalid_argument(
        "This method should only be called for program pads that are "
        "pressed, and the presses shouldn't be generated by the note repeat "
        "feature.\n");
}

bool SnapshotView::isProgramPadPressed(ProgramPadIndex idx) const
{
    for (auto &e : snap->programPadEvents)
    {
        if (e->padIndex == idx)
        {
            return true;
        }
    }
    return false;
}

NoteEventPtr
SnapshotView::retrievePlayNoteEvent(NoteNumber note) const
{
    for (auto &e : snap->noteEvents)
    {
        if (e->noteNumber == note)
        {
            return e;
        }
    }
    return nullptr;
}

std::shared_ptr<sequencer::NoteOnEvent>
SnapshotView::retrieveRecordNoteEvent(NoteNumber note) const
{
    for (const auto &e : snap->noteEvents)
    {
        if (e->noteNumber == note && e->recordNoteEvent)
        {
            return *e->recordNoteEvent;
        }
    }
    return {};
}

PhysicalPadPressEventPtr
SnapshotView::retrievePhysicalPadPressEvent(
    PhysicalPadIndex idx) const
{
    for (const auto &e : snap->physicalPadEvents)
    {
        if (e->padIndex == idx)
        {
            return e;
        }
    }
    return {};
}

NoteEventPtr SnapshotView::retrieveNoteEvent(NoteNumber note,
                                                            Source src) const
{
    for (const auto &e : snap->noteEvents)
    {
        if (e->noteNumber == note && e->source == src)
        {
            return e;
        }
    }
    return {};
}

int SnapshotView::getTotalPressedProgramPadCount() const
{
    return snap->programPadEvents.size();
}

